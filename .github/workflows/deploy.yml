name: Deploy to Test Server

on:
  push:
    branches: [ develop ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test  # This will require approval for deployment
    
    env:
      FLASK_APP: app.py
      FLASK_ENV: production
      # Production environment variables from secrets
      DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      ADMIN_EMAIL: ${{ secrets.PROD_ADMIN_EMAIL }}
      ADMIN_PASSWORD: ${{ secrets.PROD_ADMIN_PASSWORD }}
      SECURITY_PASSWORD_SALT: ${{ secrets.PROD_PASSWORD_SALT }}
      SECRET_KEY: ${{ secrets.PROD_SECRET_KEY }}
      # Server deployment variables
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        # Create a deployment package excluding test files and development dependencies
        tar --exclude='tests' \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='.env*' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='.pytest_cache' \
            --exclude='.coverage' \
            --exclude='htmlcov' \
            -czf deploy.tar.gz .
    
    - name: Deploy to test server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "deploy.tar.gz"
        target: ${{ secrets.DEPLOY_PATH }}
    
    - name: Execute deployment commands
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          tar xzf deploy.tar.gz
          rm deploy.tar.gz
          
          # Create and activate virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Run database migrations
          flask db upgrade
          
          # Restart the application
          sudo systemctl restart f1-fantasy
          
          # Clean up old files
          find . -type f -name "*.pyc" -delete
          find . -type d -name "__pycache__" -delete 